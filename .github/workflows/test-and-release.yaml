name: Test and Release

on:
  push:
    branches:
      - actions

jobs:
  main:
    runs-on: ubuntu-latest
    environment: actions
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        ref: actions
        token: ${{ secrets.GIT_TOKEN }}
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
          python-version: 3.9
    - name: Configure git
      run: |
        git config --global user.name "version bot"
        git config --global user.email "<>"
    - name: Setup python environment
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run pytest
      env:
        PYTHONPATH: .
      run: |
        pytest
    - name: Increment version, tag branch
      run: |
        OLD_VERSION=$(grep version setup.py | grep -Po "\d+.\d+.\d+")
        NEW_VERSION=$(echo $OLD_VERSION | perl -pe 's/^((\d+\.)*)(\d+)(.*)$/$1.($3+1).$4/e')
        for file in setup.py docsrc/conf.py; do
            sed s/$OLD_VERSION/$NEW_VERSION/g $file -i
            git add $file
        done
        git commit -m "Release $NEW_VERSION"
        git tag | grep -w $NEW_VERSION && git tag -d $NEW_VERSION
        git tag $NEW_VERSION
    - name: Update documentation
      run: |
        docsrc/build
    - name: Push to main
      run: |
        git push origin actions:main -f
    - name: Push tag
      run: |
        VERSION=$(grep version setup.py | grep -Po "\d+.\d+.\d+")
        git ls-remote --tags | grep -w refs/tags/$VERSION && git push --delete origin $VERSION
        git push origin $VERSION
    - name: Push to actions
      run: |
        git commit --allow-empty -m "[no ci]"
        git push origin actions:actions
    - name: Publish docs to GitHub pages (docs branch)
      run: |
        git add docs -f
        git commit docs -m "Updating Documentation"
        git push origin actions:docs -f
